def greet(name):
   print(f"Привет, {name}!")
greet("piter")
def draw_new_section(section_name):
    print(f"==============================={section_name}=====================================")
def draw_new_section():
    print("-------------------------------------------------------------")
print()
print("- using only name without the call of function, so by this way we may call the function in another variable by using function call sign - () ")
print("another_print = print")
print("another_print('Выводим на экран при помощи переменной another_print!')")
another_print = print
another_print('Выводим на экран при помощи переменной another_print!')
# Выводим на экран при помощи переменной another_print!
# Теперь функция print и another_print выполняют одну и ту же операцию, просто называются по-разному
print("Эти примеры нужны для понимания главной вещи: само по себе имя функции — это просто ссылка, которой мы можем оперировать в привычном для нас ключе. "
      " А использование функции — это использование оператора круглых скобок.")
print()
print("Принцип DRY (Don’t Repeat Yourself — «Избегай самоповтора») — один из основных принципов разработки ПО, "
      "который наставляет нас избегать дублирования кода путём применения различных инструментов и навыков.")
print("""\t
        "Процедурное программирование. - Программа без функций, которая выполняется последовательно сверху вниз.
        "Функциональное программирование. - Программа, которая содержит функции, но всё ещё является процедурным кодом. Однако такой код более компактный, поскольку вся функциональность вынесена за скобки — в функции.
        "Объектно-ориентированное программирование. - Программа строится на основе классов и объектов. С этим типом программирования мы познакомим вас на заключительных этапах.
""")
draw_new_section()
# count_elements() # Вызов до объявления - здесь и получим ошибку
def count_elements(): # Объявление функции
   print('Функция, которая будет считать количество элементов') # Тело функции
count_elements() # Вызов после объявления
# NameError: name 'count_elements' is not defined
draw_new_section()
print("Определение того, что ожидает получить функция, называется параметром. А то, что мы передаём функции при её вызове, называется аргументом.")
print("""def count_elements(input_list): # <- параметр
   print('Считаю элементы в {}'.format(input_list))
list1 = [1, 2, 3, 2, 1]
count_elements(list1) # <- аргумент""")





